{"/home/travis/build/npmtest/node-npmtest-google-translate/test.js":"/* istanbul instrument in package npmtest_google_translate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-translate/lib.npmtest_google_translate.js":"/* istanbul instrument in package npmtest_google_translate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_google_translate = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_google_translate = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-google-translate/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-google-translate && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_google_translate */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_google_translate\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_google_translate.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_google_translate.rollup.js'] =\n            local.assetsDict['/assets.npmtest_google_translate.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_google_translate.__dirname + '/lib.npmtest_google_translate.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-google-translate/node_modules/google-translate/lib/main.js":"var _               = require('underscore'),\n    request         = require('request'),\n    querystring     = require('querystring'),\n    async           = require('async'),\n    entities        = require('he');\n\n// Globals\nvar apiBase = 'https://translation.googleapis.com/language/translate/v2/',\n    maxGetQueryLen = 4500,\n    maxSegments = 100,\n    concurrentLimit = 10; // Max num concurrent requests. Can be overridden by passing a new limit when requiring module\n\n////\n//  SEND REQUEST\n////\n\n// Closure that returns a function for making a\n// GET request to Google with an apiKey\nvar getRequestWithApi = function(apiKey) {\n  return function(path, data, done) {\n    var url = apiBase + path + '?' + querystring.stringify(_.extend({ 'key': apiKey }, data));\n    request.get(url, globalResponseHandler({ url: url }, done));\n  };\n};\n\nvar postRequestWithApi = function(apiKey) {\n  return function(path, data, done) {\n    var requestData = {\n      url: apiBase + path,\n      method: 'POST',\n      form: querystring.stringify(_.extend({ 'key': apiKey }, data)),\n      headers: {\n        'X-HTTP-Method-Override': 'GET'\n      }\n    };\n    request(requestData, globalResponseHandler(requestData, done));\n  };\n};\n\n////\n//   RESPONSE HANDLERS\n////\n\nvar globalResponseHandler = function(request, done) {\n  return function(err, res, body) {\n    var msg;\n\n    if (!done || !_.isFunction(done)) return;\n\n    // Catch connection errors\n    if (err || !res || res.statusCode !== 200) return done({\n      error: err,\n      response: res,\n      body: body,\n      request: request,\n      toString: function() {\n        return err ? err.toString() : '';\n      },\n    }, null);\n\n    // Try to parse response\n    var parsedBody = null;\n    try {\n      parsedBody = JSON.parse(body);\n    } catch(e) {\n      err = 'Could not parse response from Google: ' + (body || 'null');\n      return done(err, null);\n    }\n\n    // Return response\n    done(null, parsedBody);\n  };\n};\n\nvar parseTranslations = function(originalStrings, done) {\n  return function(err, data) {\n    if (err) return done(err, null);\n\n    // Remove nesting\n    data = data.data;\n    data = data.translations ? data.translations : data;\n\n    // Add originalText to response\n    originalStrings.forEach(function(s, i){\n      if (data[i]) _.extend(data[i], { originalText: s });\n    });\n\n    // Decode html entities\n    data = data.map(function(translation){\n      translation.translatedText = entities.decode(translation.translatedText);\n      return translation;\n    });\n\n    // Return nested languages array\n    done(null, data);\n  };\n};\n\nvar parseSupportedLanguages = function(done) {\n  return function(err, languages) {\n    if (err) return done(err, null);\n    languages = languages.data.languages;\n    if (languages[0] && !languages[0].name) languages = _.pluck(languages, 'language');\n    done(null, languages);\n  };\n};\n\nvar parseLanguageDetections = function(originalStrings, done) {\n  return function(err, data) {\n    if (err) return done(err, null);\n\n    // Remove nesting and parse\n    data = data.data && data.data.detections ? data.data.detections : data;\n    if (data.length > 1) {\n      data = data.map(function(d){ return d[0]; });\n    } else {\n      data = data[0];\n    }\n\n    // Add originalText to response\n    originalStrings.forEach(function(s, i){\n      if (data[i]) _.extend(data[i], { originalText: s });\n    });\n\n    done(null, data);\n  };\n};\n\nvar shouldSplitSegments = function(strings) {\n  if (!Array.isArray(strings)) return false;\n\n  // Google allows a maximum of 128 segments\n  if (strings.length > maxSegments) return true;\n\n  // Google allows max of 5k characters\n  return encodeURIComponent(strings.join(',')).length > maxGetQueryLen && strings.length !== 1;\n};\n\n////\n//  HELPERS\n////\n\n// Return array of arrays that are short enough for Google to handle\nvar splitArraysForGoogle = function(arr, result) {\n  if (arr.length > maxSegments || (encodeURIComponent(arr.join(',')).length > maxGetQueryLen && arr.length !== 1)) {\n    var mid = Math.floor(arr.length / 2);\n    splitArraysForGoogle(arr.slice(0, mid), result);\n    splitArraysForGoogle(arr.slice(mid, arr.length), result);\n  } else {\n    result.push(arr);\n  }\n};\n\n////\n//   PUBLIC API\n////\n\nmodule.exports = function(apiKey, newConcurrentLimit) {\n\n  // Set new concurrent limit for async calls if specified\n  concurrentLimit = newConcurrentLimit || concurrentLimit;\n\n  var get = getRequestWithApi(apiKey),\n      post = postRequestWithApi(apiKey),\n      api = {};\n\n\n  // TRANSLATE\n\n  api.translate = function(strings, sourceLang, targetLang, done) {\n    if (typeof strings !== 'string' && !Array.isArray(strings)) return done('Input source must be a string or array of strings');\n    if (typeof sourceLang !== 'string') return done('No target language specified. Must be a string');\n\n    // Make sourceLang optional\n    if (!done) {\n      done = targetLang;\n      targetLang = sourceLang;\n      sourceLang = null;\n    }\n    if (!_.isFunction(done)) return console.log('No callback defined');\n\n    // Split into multiple calls if string array is longer than allowed by Google (5k for POST)\n    var stringSets;\n    if (shouldSplitSegments(strings)) {\n      stringSets = [];\n      splitArraysForGoogle(strings, stringSets);\n    } else if (!Array.isArray(strings)) {\n      stringSets = [[strings]];\n    } else {\n      stringSets = [strings];\n    }\n\n    // Request options\n    var data = { target: targetLang };\n    if (sourceLang) data.source = sourceLang;\n\n    // Run queries async\n    async.mapLimit(stringSets, concurrentLimit, function(stringSet, done) {\n\n      post('', _.extend({ q: stringSet }, data), parseTranslations(stringSet, done));\n\n    }, function(err, translations) {\n      if (err) return done(err);\n\n      // Merge and return translation\n      translations = _.flatten(translations);\n      if (translations.length === 1) translations = translations[0];\n      done(null, translations);\n    });\n\n  };\n\n\n  // GET SUPPORTED LANGUAGES\n\n  api.getSupportedLanguages = function(target, done) {\n    // Data param is optional\n    if (_.isFunction(target)) {\n      done = target;\n      target = {};\n    } else {\n      target = { target: target };\n    }\n    if (!_.isFunction(done)) return console.log('No callback defined');\n\n    get('languages', target, parseSupportedLanguages(done));\n  };\n\n\n  // DETECT LANGUAGES\n\n  api.detectLanguage = function(strings, done) {\n    if (!done) return console.log('No callback defined');\n    if (typeof strings !== 'string' && !Array.isArray(strings)) return done('Input source must be a string or array of strings');\n\n    // Split into multiple calls if string array is longer than allowed by Google (5k for POST)\n    var stringSets;\n    if (shouldSplitSegments(strings)) {\n      stringSets = [];\n      splitArraysForGoogle(strings, stringSets);\n    } else if (!Array.isArray(strings)) {\n      stringSets = [[strings]];\n    } else {\n      stringSets = [strings];\n    }\n\n    // Run queries async\n    async.mapLimit(stringSets, concurrentLimit, function(stringSet, done) {\n\n      post('detect', { q: stringSet }, parseLanguageDetections(stringSet, done));\n\n    }, function(err, detections) {\n      if (err) return done(err);\n\n      // Merge arrays and return detections\n      detections = _.flatten(detections);\n      if (detections.length === 1) detections = detections[0];\n      done(null, detections);\n\n    });\n\n  };\n\n  ////\n  //   RETURN API\n  ////\n\n  return {\n    translate:                api.translate,\n    getSupportedLanguages:    api.getSupportedLanguages,\n    detectLanguage:           api.detectLanguage\n  };\n\n};\n"}